//#ifdef cl_khr_fp64
//#pragma OPENCL EXTENSION cl_khr_fp64 : enable
//#elif defined(cl_amd_fp64)
//#pragma OPENCL EXTENSION cl_amd_fp64 : enable
//#else
//#endif
//#pragma OPENCL EXTENSION cl_khr_gl_sharing : enable

__kernel void updateParticle(__global float2* posC, 
							 __global float2* posO, 
							 const __global float* fieldStrength,
							 const float deadzone,  
							 const float velDamper_input, 
							 const float aspectRatio,
							 const __global uint* numFocalPoints,
							 const __global float2* focalPoints){

	const float2 origin= (float2)(0.0f, 0.0f);
	float2 aVect	   = (float2)(0.0f, 0.0f);
	float2 pVect;
	float2 mP;
	float2 oldPos;
	float2 posC_new;
	float dist;
	int fsToUse;
	int accelLoop = 0;

	//const float X_MAX = aspectRatio;
	//const float X_MIN = -aspectRatio;
	//const float Y_MAX = 1.0f;
	//const float Y_MIN = -1.0f;

	const float2 AR_Matrix = (float2)(aspectRatio, 1.0f);

	int gid = get_global_id(0); 

	const float2 pC = posC[gid]*AR_Matrix;
	const float2 pO = posO[gid]*AR_Matrix;


	while(accelLoop < numFocalPoints[0]){
		mP = focalPoints[accelLoop];

		pVect = (mP - pC);
		dist = fast_length(pVect);

		if(dist < deadzone) fsToUse = 0;
		if(dist >= deadzone) fsToUse = 1;
		 // if(dist > 2*deadzone) fsToUse = 2;
		 // if(dist > 3*deadzone) fsToUse = 3;
		 // if(dist > 4*deadzone) fsToUse = 4;
		 // if(dist > 5*deadzone) fsToUse = 5;
		 // if(dist > 6*deadzone) fsToUse = 6;
		 // if(dist > 7*deadzone) fsToUse = 7;
		 // if(dist > 8*deadzone) fsToUse = 8;
		 // if(dist > 9*deadzone) fsToUse = 9;


		// Acceleration Vector = Field Strength * Direction
		//aVect += fieldStrength[fsToUse] * pVect/dist;
		aVect += fieldStrength[fsToUse] * pVect/dist;
		++accelLoop;
	}

	posC_new = pC + velDamper_input*(pC - pO) + aVect;
	oldPos = pC;

	// Bounds Checking.
	// if(posC_new.x < X_MIN){
	// 	posC_new.x = 2*X_MIN-posC_new.x;
	// 	oldPos.x = 2*X_MIN-oldPos.x;
	// }
	// else if(posC_new.y < Y_MIN){
	// 	posC_new.y = 2*Y_MIN-posC_new.y;
	// 	oldPos.y = 2*Y_MIN-oldPos.y;
	// }
	// else if(posC_new.x > X_MAX){
	// 	posC_new.x = 2*X_MAX - posC_new.x;
	// 	oldPos.x = 2*X_MAX - oldPos.x;
	// }
	// else if(posC_new.y > Y_MAX){
	// 	posC_new.y = 2*Y_MAX - posC_new.y;
	// 	oldPos.y = 2*Y_MAX - oldPos.y;
	// }

	
	posO[gid] = oldPos/AR_Matrix;
	posC[gid] = posC_new/AR_Matrix;
}
